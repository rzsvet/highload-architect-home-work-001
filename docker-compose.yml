x-redis-common:
  &redis-common
  networks:
    network-db:
  command: |
    sh -c "
    cat > /tmp/redis.conf << 'EOF'
    port 6379
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    appendonly yes
    bind 0.0.0.0
    EOF
    redis-server /tmp/redis.conf
    "

services:
  traefik:
    image: traefik:v3.5.1
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:8081
      - --metrics.prometheus=true
      - --metrics.prometheus.entrypoint=traefik
      - --log.level=DEBUG
    ports:
      - "8081:8081"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      network-db:
      network-api:
      network-web:
      network-monitoring:
      network-public:
    # labels:
      # Авторизация: Dashboard защищен базовой аутентификацией:
      # Логин: admin
      # Пароль: password (по умолчанию)
      # Генерация пароля:
      # Bash:
      # htpasswd -nb user password
      # Docker
      # docker run --rm httpd:2.4-alpine htpasswd -nb user password
      # Нужно не забыть заменить $ на $$ прежде чем указывать в docker compose
      # - "traefik.http.routers.traefik-api.middlewares=traefik-auth"
      # - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$apr1$$dd4OPiEE$$1NKZ9eSD9GJtj0DYHwkh9." # пароль: password

  api:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.services.api.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.api.middlewares=api-stripprefix"
    build:
      context: ./api/
      dockerfile: ../.configs/api.Dockerfile
    environment:
      GIN_MODE: "release"
      SERVER_PORT: "${SERVER_PORT:-8080}"
      SERVER_PATH: "${SERVER_PATH:-/}"
      JWT_SECRET: "${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}"
      # WRITE_DB_HOST: "${WRITE_DB_HOST:-db}"
      # WRITE_DB_HOST: "${WRITE_DB_HOST:-db-master}"
      # WRITE_DB_PORT: "${WRITE_DB_PORT:-5432}"
      WRITE_DB_HOST: "${WRITE_DB_HOST:-haproxy}"
      WRITE_DB_PORT: "${WRITE_DB_PORT:-5000}"
      WRITE_DB_NAME: "${WRITE_DB_NAME:-postgres}"
      WRITE_DB_USER: "${WRITE_DB_USER:-root}"
      WRITE_DB_PASSWORD: "${WRITE_DB_PASSWORD:-password}"
      # READ_DB_HOST: "${READ_DB_HOST:-db}"
      # READ_DB_HOST: "${READ_DB_HOST:-db-slave-01}"
      # READ_DB_PORT: "${READ_DB_PORT:-5432}"
      READ_DB_HOST: "${READ_DB_HOST:-haproxy}"
      READ_DB_PORT: "${READ_DB_PORT:-5001}"
      READ_DB_NAME: "${READ_DB_NAME:-postgres}"
      READ_DB_USER: "${READ_DB_USER:-root}"
      READ_DB_PASSWORD: "${READ_DB_PASSWORD:-password}"
      SERVER_SWAGGER: "${SERVER_SWAGGER:-disabled}"
      CORS_ALLOWED_ORIGINS: "${CORS_ALLOWED_ORIGINS:-http://localhost:8079}"
      REDIS_CLUSTER_NODES: "${REDIS_CLUSTER_NODES:-redis-node-01:6379,redis-node-02:6379,redis-node-03:6379,redis-node-04:6379,redis-node-05:6379,redis-node-06:6379}"
      REDIS_CLUSTER_MODE: "${REDIS_CLUSTER_NODES-true}"
    ports:
      - "${SERVER_PORT:-8079}:${SERVER_PORT:-8080}"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/api", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - haproxy
      # db-master:
      #   condition: service_healthy
      #   restart: true
    networks:
      network-db:
      network-api:
      network-monitoring:

# Database single node

  # db:
  #   # labels:
  #   #   - "traefik.enable=true"
  #   #   # TCP Router
  #   #   - "traefik.tcp.routers.db.rule=HostSNI(`*`)"
  #   #   - "traefik.tcp.routers.db.service=db-service"
  #   #   # TCP Service
  #   #   - "traefik.tcp.services.db-service.loadbalancer.server.port=5432"
  #   image: postgres:15.5-alpine3.18
  #   environment:
  #     POSTGRES_USER: "${POSTGRES_USER:-root}"
  #     POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
  #     POSTGRES_DB: "${POSTGRES_DB:-root}"
  #     PGPORT: "${POSTGRES_PORT:-5432}"
  #   command: ["postgres", "-c", "max_connections=1000"]
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB:-root}"]
  #     interval: 40s
  #     timeout: 30s
  #     retries: 3
  #     start_period: 60s
  #   ports:
  #     - "${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}"
  #   volumes:
  #     - pg_data:/var/lib/postgresql/data
  #   networks:
  #     network-db:

# Database one master and two slaves

  # db-master:
  #   # labels:
  #   #   - "traefik.enable=true"
  #   #   # TCP Router
  #   #   - "traefik.tcp.routers.db.rule=HostSNI(`*`)"
  #   #   - "traefik.tcp.routers.db.service=db-service"
  #   #   # TCP Service
  #   #   - "traefik.tcp.services.db-service.loadbalancer.server.port=5432"
  #   image: postgres:16.10-alpine3.22
  #   environment:
  #     POSTGRES_USER: "${POSTGRES_USER:-root}"
  #     POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
  #     POSTGRES_DB: "${POSTGRES_DB:-root}"
  #     PGPORT: "${POSTGRES_PORT:-5432}"
  #     PGDATA: /var/lib/postgresql/data/pgdata
  #     POSTGRES_REPLICATION_USER: "${POSTGRES_REPLICATION_USER:-replica_user}"
  #     POSTGRES_REPLICATION_PASSWORD: "${POSTGRES_REPLICATION_PASSWORD:-replica_password}"
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB:-root}"]
  #     interval: 40s
  #     timeout: 30s
  #     retries: 3
  #     start_period: 60s
  #   ports:
  #     - "${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}"
  #   volumes:
  #     - pg_data_master:/var/lib/postgresql/data/pgdata
  #     - .configs/db/master/init.sh:/docker-entrypoint-initdb.d/init.sh
  #   networks:
  #     network-db:

  # db-slave-01:
  #   image: postgres:16.10-alpine3.22
  #   environment:
  #     PGDATA: /var/lib/postgresql/data/pgdata
  #     POSTGRES_REPLICATION_USER: "${POSTGRES_REPLICATION_USER:-replica_user}"
  #     POSTGRES_REPLICATION_PASSWORD: "${POSTGRES_REPLICATION_PASSWORD:-replica_password}"
  #     PGPASSWORD: "${POSTGRES_REPLICATION_PASSWORD:-replica_password}"
  #     PGPORT: "${POSTGRES_PORT:-5432}"
  #   command: >
  #     /bin/sh -c "until pg_basebackup -w -h db-master -D /var/lib/postgresql/data/pgdata -U replica_user -P -R; do sleep 1; done &&
  #     /usr/local/bin/docker-entrypoint.sh postgres" 
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB:-root}"]
  #     interval: 40s
  #     timeout: 30s
  #     retries: 3
  #     start_period: 60s
  #   # ports:
  #   #   - "${POSTGRES_REPLICA_01_PORT:-5433}:${POSTGRES_PORT:-5432}"
  #   depends_on:
  #     db-master:
  #       condition: service_healthy
  #   volumes:
  #     - pg_data_replica_01:/var/lib/postgresql/data/pgdata
  #     - .configs/db/replicas/01-init.sh:/docker-entrypoint-initdb.d/init.sh
  #   networks:
  #     network-db:

  # db-slave-02:
  #   image: postgres:16.10-alpine3.22
  #   environment:
  #     PGDATA: /var/lib/postgresql/data/pgdata
  #     POSTGRES_REPLICATION_USER: "${POSTGRES_REPLICATION_USER:-replica_user}"
  #     POSTGRES_REPLICATION_PASSWORD: "${POSTGRES_REPLICATION_PASSWORD:-replica_password}"
  #     PGPASSWORD: "${POSTGRES_REPLICATION_PASSWORD:-replica_password}"
  #     PGPORT: "${POSTGRES_PORT:-5432}"
  #   command: >
  #     /bin/sh -c "until pg_basebackup -w -h db-master -D /var/lib/postgresql/data/pgdata -U replica_user -P -R; do sleep 1; done &&
  #     /usr/local/bin/docker-entrypoint.sh postgres" 
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB:-root}"]
  #     interval: 40s
  #     timeout: 30s
  #     retries: 3
  #     start_period: 60s
  #   # ports:
  #   #   - "${POSTGRES_REPLICA_02_PORT:-5434}:${POSTGRES_PORT:-5432}"
  #   depends_on:
  #     db-master:
  #       condition: service_healthy
  #   volumes:
  #     - pg_data_replica_02:/var/lib/postgresql/data/pgdata
  #     - .configs/db/replicas/02-init.sh:/docker-entrypoint-initdb.d/init.sh
  #   networks:
  #     network-db:     

# Database Postgres cluster

  db-etcd-node-01: &etcd
    image: ${PATRONI_TEST_IMAGE:-webadm/patroni:v4.1.0}
    hostname: etcd1
    volumes:
      - etcd_data_node_01:/home/postgres
    networks:
      network-db:
    # ports:
    #   - "2379:2379"
    environment:
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: tutorial
      ETCD_UNSUPPORTED_ARCH: arm64
    command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380

  db-etcd-node-02:
    <<: *etcd
    hostname: etcd2
    # ports:
    #   - "2380:2379"
    volumes:
      - etcd_data_node_02:/home/postgres
    command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380

  db-etcd-node-03:
    <<: *etcd
    hostname: etcd3
    # ports:
    #   - "2381:2379"
    volumes:
      - etcd_data_node_03:/home/postgres
    command: etcd --name etcd3 --initial-advertise-peer-urls http://etcd3:2380

  haproxy:
    image: ${PATRONI_TEST_IMAGE:-webadm/patroni:v4.1.0}
    networks:
      network-db:
    hostname: haproxy
    ports:
      - "5000:5000"
      - "5001:5001"
    command: haproxy
    environment: &node_env
      ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
      PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
      PATRONI_SCOPE: demo
      PATRONI_RESTAPI_USERNAME: "admin"
      PATRONI_RESTAPI_PASSWORD: "admin"
      PATRONI_SUPERUSER_USERNAME: "${POSTGRES_USER:-root}"
      PATRONI_SUPERUSER_PASSWORD: "${POSTGRES_PASSWORD:-password}"
      PATRONI_REPLICATION_USERNAME: "replicator"
      PATRONI_REPLICATION_PASSWORD: "replicate"
      PATRONI_admin_PASSWORD: "admin"
      PATRONI_admin_OPTIONS: "createdb,createrole"

  db-pg-node-01:
    image: ${PATRONI_TEST_IMAGE:-webadm/patroni:v4.1.0}
    volumes:
      - pg_data_node_01:/home/postgres
    networks:
      network-db:
    environment:
      <<: *node_env
      PATRONI_NAME: db-pg-node-01

  db-pg-node-02:
    image: ${PATRONI_TEST_IMAGE:-webadm/patroni:v4.1.0}
    volumes:
      - pg_data_node_02:/home/postgres
    networks:
      network-db:
    environment:
      <<: *node_env
      PATRONI_NAME: db-pg-node-02

  db-pg-node-03:
    image: ${PATRONI_TEST_IMAGE:-webadm/patroni:v4.1.0}
    volumes:
      - pg_data_node_03:/home/postgres
    networks:
      network-db:
    environment:
      <<: *node_env
      PATRONI_NAME: db-pg-node-03

# Database Redis Cluster

  redis-node-01:
    <<: *redis-common
    image: redis:8.2.2-alpine3.22
    hostname: redis-node-01
    # ports:
    #   - "6381:6379"

  redis-node-02:
    <<: *redis-common
    image: redis:8.2.2-alpine3.22
    hostname: redis-node-02
    # ports:
    #   - "6382:6379"

  redis-node-03:
    <<: *redis-common
    image: redis:8.2.2-alpine3.22
    hostname: redis-node-03
    # ports:
    #   - "6383:6379"
  
  redis-node-04:
    <<: *redis-common
    image: redis:8.2.2-alpine3.22
    hostname: redis-node-04
    # ports:
    #   - "6384:6379"

  redis-node-05:
    <<: *redis-common
    image: redis:8.2.2-alpine3.22
    hostname: redis-node-05
    # ports:
    #   - "6385:6379"

  redis-node-06:
    <<: *redis-common
    image: redis:8.2.2-alpine3.22
    hostname: redis-node-06
    # ports:
    #   - "6386:6379"
    
  redis-cluster-creator:
    image: redis:8.2.2-alpine3.22
    # ports:
    #   - 6999:6999
    networks:
      network-db:
    command: redis-cli -p 6999 --cluster create redis-node-01:6379 redis-node-02:6379 redis-node-03:6379 redis-node-04:6379 redis-node-05:6379 redis-node-06:6379 --cluster-replicas 1 --cluster-yes
    depends_on:
      - redis-node-01
      - redis-node-02
      - redis-node-03
      - redis-node-04
      - redis-node-05
      - redis-node-06
  
  redis-insight:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.insight.rule=PathPrefix(`/services/insight`)"
      - "traefik.http.services.insight.loadbalancer.server.port=5540"
      - "traefik.http.middlewares.insight-stripprefix.stripprefix.prefixes=/"
      - "traefik.http.routers.insight.middlewares=insight-stripprefix"
    image: redis/redisinsight:2.70.1
    # ports:
    #   - 5540:5540
    networks:
      network-db:
    environment:
      - RI_REDIS_HOST=redis-node-01
      - RI_REDIS_PORT=6379
      - RI_REDIS_ALIAS=redis-node-01:6379
      - RI_PROXY_PATH=/services/insight/
    depends_on:
      - redis-node-01
      - redis-node-02
      - redis-node-03
      - redis-node-04
      - redis-node-05
      - redis-node-06
      - redis-cluster-creator

  redis-exporter:
    image: oliver006/redis_exporter:v1.79.0
    ports:
      - 9121:9121
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis-node-01:6379"
      REDIS_USER: null
    links:
      - redis-node-01
      - redis-node-02
      - redis-node-03
      - redis-node-04
      - redis-node-05
      - redis-node-06
      - redis-cluster-creator
      - prometheus
    networks:
      network-db:

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.0
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/run:/var/run:rw
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      network-monitoring:

  node-exporter:
    image: prom/node-exporter:v1.9.1
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      network-monitoring:

  postgres-exporter:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres-exporter.rule=PathPrefix(`/exporter/postgres`)"
      - "traefik.http.services.postgres-exporter.loadbalancer.server.port=9187"
      - "traefik.http.middlewares.postgres-exporter-stripprefix.stripprefix.prefixes=/exporter/postgres"
      - "traefik.http.routers.postgres-exporter.middlewares=postgres-exporter-stripprefix"
    image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
    restart: unless-stopped
    environment:
      # DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-root}:${POSTGRES_PASSWORD:-password}@db:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-root}?sslmode=disable"
      # DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-root}:${POSTGRES_PASSWORD:-password}@db-master:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-root}?sslmode=disable,postgresql://${POSTGRES_USER:-root}:${POSTGRES_PASSWORD:-password}@db-slave-01:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-root}?sslmode=disable,postgresql://${POSTGRES_USER:-root}:${POSTGRES_PASSWORD:-password}@db-slave-02:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-root}?sslmode=disable"
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-root}:${POSTGRES_PASSWORD:-password}@db-pg-node-01:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-postgres}?sslmode=disable,postgresql://${POSTGRES_USER:-root}:${POSTGRES_PASSWORD:-password}@db-pg-node-02:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-postgres}?sslmode=disable,postgresql://${POSTGRES_USER:-root}:${POSTGRES_PASSWORD:-password}@db-pg-node-03:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-postgres}?sslmode=disable"
    # ports:
    #   - 9187:9187
    depends_on:
      # - db
      # - db-master
      # - db-slave-01
      # - db-slave-02
      - haproxy
    networks:
      network-db:

  prometheus:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=PathPrefix(`/services/prometheus`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.middlewares.prometheus-stripprefix.stripprefix.prefixes=/services/prometheus"
      - "traefik.http.routers.prometheus.middlewares=prometheus-stripprefix"
    image: prom/prometheus:v2.48.0
    restart: unless-stopped
    healthcheck:
      test: "wget -q --spider http://localhost:9090/metrics || exit 1"
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 60s
    command: 
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.route-prefix=/
      - --web.external-url=http://localhost:8081/services/prometheus
    volumes:
      - prometheus_data:/prometheus
      - ".configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    # ports:
    #   - 9090:9090
    networks:
      network-monitoring:
      network-db:

  grafana:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=PathPrefix(`/services/grafana`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.grafana-stripprefix.stripprefix.prefixes=/services/grafana"
      - "traefik.http.routers.grafana.middlewares=grafana-stripprefix"
    image: grafana/grafana:10.2.2-ubuntu
    environment:
      GF_SECURITY_ADMIN_USER: "${GF_SECURITY_ADMIN_USER:-admin}"
      GF_SECURITY_ADMIN_PASSWORD: "${GF_SECURITY_ADMIN_PASSWORD:-password}"
      GF_SERVER_HTTP_PORT: "${GF_SERVER_HTTP_PORT:-3000}"
      GF_SERVER_ROOT_URL: "http://localhost:8081/services/grafana/"
      GF_SERVER_SERVE_FROM_SUB_PATH: false
    depends_on:
      - prometheus
    # ports:
    #   - "${GF_PUBLIC_HTTP_PORT:-3000}:${GF_SERVER_HTTP_PORT:-3000}"
    volumes:
      - grafana_data:/var/lib/grafana
      - .configs/grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      network-monitoring:
    restart: always

  swagger-ui:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.swagger-ui.rule=PathPrefix(`/services/openapi`)"
      - "traefik.http.services.swagger-ui.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.swagger-ui-stripprefix.stripprefix.prefixes=/services/openapi"
      - "traefik.http.routers.swagger-ui.middlewares=swagger-ui-stripprefix"
    image: swaggerapi/swagger-ui:v5.28.0
    # ports:
    #   - "${SW_PUBLIC_HTTP_PORT:-8082}:${SW_HTTP_PORT:-8080}"
    environment:
      - SWAGGER_JSON=/data/openapi.yaml
    volumes:
      - .configs/swagger:/data
    networks:
      network-public:
  
volumes:
  pg_data:
  pg_data_master:
  pg_data_replica_01:
  pg_data_replica_02:
  pg_data_node_01:
  pg_data_node_02:
  pg_data_node_03:
  etcd_data_node_01:
  etcd_data_node_02:
  etcd_data_node_03:
  app_uploads:
  prometheus_data:
  grafana_data:
  nginx-logs:

networks:
  network-db:
    # internal: true
    ipam:
      config:
        - subnet: 172.21.0.64/27
  network-api:
    # internal: true
    ipam:
      config:
        - subnet: 172.21.0.16/28
  network-web:
    # internal: true
    ipam:
      config:
        - subnet: 172.21.0.32/28
  network-monitoring:
    # internal: true
    ipam:
      config:
        - subnet: 172.21.0.48/28
  network-public:
    ipam:
      config:
        - subnet: 172.21.0.0/28
